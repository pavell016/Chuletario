

### Arrays en Java

Un **array** es una estructura de datos que almacena múltiples elementos del mismo tipo en posiciones contiguas de memoria. 
En Java, los arrays tienen un tamaño fijo, lo que significa que no se pueden redimensionar después de ser creados. Los arrays 
son útiles cuando conoces el número exacto de elementos que necesitas almacenar y todos los elementos son del mismo tipo.

#### Características de los Arrays
- **Tamaño fijo**: Una vez que el array se declara con un tamaño, no se puede cambiar.
- **Tipo homogéneo**: Todos los elementos deben ser del mismo tipo (por ejemplo, `int`, `String`).
- **Acceso rápido**: Puedes acceder a cualquier elemento de un array de forma directa mediante su índice.

#### Ejemplo Básico

int[] numeros = new int[5]; // Declara un array de 5 enteros
numeros[0] = 10;            // Asigna valores a cada posición
numeros[1] = 20;
System.out.println(numeros[1]); // Imprime el valor en el índice 1


#### Arrays Multidimensionales (Matrices)
Un array también puede tener múltiples dimensiones, y el más común es el array bidimensional (o matriz), útil para representar tablas o matrices matemáticas. 

int[][] matriz = new int[3][3];  // Crea una matriz de 3x3
matriz[0][0] = 1;
System.out.println(matriz[0][0]); // Imprime el valor en la posición [0][0]


---

### ArrayLists en Java

El **ArrayList** es una clase en Java que proporciona una estructura de datos similar a un array, 
pero con la capacidad de cambiar de tamaño dinámicamente. A diferencia de los arrays, los `ArrayLists` 
son más flexibles y ofrecen métodos útiles para manipular los elementos en la lista. Los `ArrayLists` están disponibles en el paquete `java.util` y,
debido a su capacidad de cambio de tamaño, suelen ser la opción preferida cuando el tamaño de la colección de datos es desconocido o variable.

#### Características del ArrayList
- **Tamaño dinámico**: 
Un `ArrayList` puede crecer y reducirse automáticamente al añadir o eliminar elementos.
- **Solo objetos**: 
Puede almacenar solo objetos de tipo referencia (clases) y no tipos primitivos, aunque admite `Integer`, `Double`, etc., 
para manejar datos numéricos (esto es conocido como autoboxing).

#### Ejemplo Básico

import java.util.ArrayList;

ArrayList<String> nombres = new ArrayList<>(); // Declara un ArrayList de cadenas
nombres.add("Juan");
nombres.add("Ana");
nombres.add("Luis");

System.out.println(nombres.get(0)); // Imprime "Juan"
nombres.set(1, "Maria"); // Cambia "Ana" por "Maria"
nombres.remove(2); // Elimina "Luis" del ArrayList
System.out.println(nombres.size()); // Imprime el tamaño del ArrayList


#### Métodos Principales del ArrayList
- `add(elemento)`: Agrega un elemento al final.
- `add(indice, elemento)`: Inserta un elemento en una posición específica.
- `get(indice)`: Obtiene el elemento en el índice especificado.
- `remove(indice)`: Elimina el elemento en el índice especificado.
- `size()`: Devuelve el número de elementos en el `ArrayList`.

---

### Comparación entre Arrays y ArrayLists

La siguiente tabla resume las diferencias clave entre arrays y `ArrayLists` en Java:

| Característica            | Array                                    | ArrayList                                                      |
|---------------------------|------------------------------------------|----------------------------------------------------------------|
| **Tamaño**                | Fijo                                     | Dinámico                                                       |
| **Tipo de elementos**     | Tipos primitivos y objetos               | Solo objetos                                                   |
| **Métodos**               | No tiene métodos adicionales             | Métodos como `add()`, `remove()`                               |
| **Eficiencia de memoria** | Más eficiente                            | Menos eficiente debido a su flexibilidad                       |
| **Rendimiento**           | Mejor rendimiento en acceso directo      | Ligeramente más lento                                          |
| **Aplicación**            | Útil cuando el tamaño es conocido y fijo | Útil cuando el tamaño puede cambiar y se necesita flexibilidad |

---

### Formas de Declarar y Usar Arrays, Matrices y ArrayLists en Java

Esta tabla muestra las distintas maneras de declarar y usar arrays unidimensionales, matrices bidimensionales y `ArrayLists` en Java, con ejemplos de uso en cada caso:

| Tipo                                         | Sintaxis de Declaración                            | Ejemplo de Uso                                     |
|----------------------------------------------|----------------------------------------------------|----------------------------------------------------|
| **Array (Unidimensional)**                   | `tipo[] nombre = new tipo[tamaño];`                | `int[] numeros = new int[5];`                      |
| **Array (Declaración y Asignación)**         | `tipo[] nombre = {val1, val2, ...};`               | `int[] numeros = {1, 2, 3, 4, 5};`                 |
| **Array (Inicialización Posterior)**         | `tipo[] nombre;` `nombre = new tipo[tamaño];`      | `int[] numeros;`<br>`numeros = new int[5];`        |
| **Array Bidimensional (Matriz)**             | `tipo[][] nombre = new tipo[filas][columnas];`     | `int[][] matriz = new int[3][3];`                  |
| **Array Bidimensional (Asignación Directa)** | `tipo[][] nombre = {{val1, val2}, {val3, val4}};`  | `int[][] matriz = {{1, 2}, {3, 4}};`               |
| **ArrayList (Creación)**                     | `ArrayList<Tipo> nombre = new ArrayList<>();`      | `ArrayList<String> nombres = new ArrayList<>();`   |
| **ArrayList (Agregar Elementos)**            | `nombre.add(elemento);`                            | `nombres.add("Juan");`                             |
| **ArrayList (Obtener Elementos)**            | `nombre.get(indice);`                              | `System.out.println(nombres.get(0));`              |
| **ArrayList (Tamaño)**                       | `nombre.size();`                                   | `System.out.println(nombres.size());`              |
| **ArrayList (Eliminar Elementos)**           | `nombre.remove(indice);`                           | `nombres.remove(1);`                               |

---

### Resumen

- **Arrays**: 
Son ideales cuando sabes de antemano el número de elementos que necesitas almacenar y deseas optimizar el uso de memoria. Son eficientes y permiten acceso rápido a los elementos mediante el índice, pero tienen la limitación de un tamaño fijo.

- **Matrices**: 
Son arrays multidimensionales que permiten representar tablas de datos o matrices matemáticas. Son útiles para estructuras de datos más complejas.

- **ArrayLists**: 
Son más flexibles y fáciles de manejar que los arrays, ya que pueden cambiar de tamaño dinámicamente. Además, proporcionan métodos adicionales para agregar, eliminar y manipular elementos, lo que los hace una opción preferida cuando el tamaño de los datos es incierto o variable.

